{"version":3,"sources":["components/QuoteGenerator.js","components/Button.js","components/TweetQuote.js","App.js","serviceWorker.js","index.js"],"names":["QuoteGenerator","props","Fragment","className","id","style","quoteStyle","selectedQuote","quote","authorStyle","author","backgroundColor","color","fontSize","lineHeight","display","fontStyle","letterSpacing","marginTop","float","Button","handleClick","buttonStyle","onClick","border","borderRadius","background","padding","margin","cursor","TweetQuote","handleNextQuoteClick","href","class","data-show-count","icon","faTwitter","size","iconStyle","async","src","charset","paddingRight","App","generateRandomQuoteIndex","quotes","state","randomIndex","Math","floor","random","length","setState","quoteIndex","fetch","then","response","json","quotesData","this","Number","isInteger","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2QAEe,SAASA,EAAeC,GACrC,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,QAAQC,GAAG,QACxB,uBAAGC,MAAOC,GACPL,EAAMM,cAAN,WAA0BN,EAAMM,cAAcC,MAA9C,KAAyD,KAG9D,yBAAKH,MAAOI,EAAaN,UAAU,SAASC,GAAG,UAA/C,UACKH,EAAMM,cAAgBN,EAAMM,cAAcG,OAAS,KAM9D,IAAMJ,EAAa,CACjBK,gBAAiB,UACjBC,MAAO,OACPC,SAAU,SACVC,WAAY,SACZC,QAAS,UAGLN,EAAc,CAClBG,MAAO,UACPI,UAAW,SACXH,SAAU,OACVI,cAAe,MACfC,UAAW,OACXC,MAAO,S,cC7BM,SAASC,EAAT,GAAkC,IAAhBC,EAAe,EAAfA,YAC/B,OACE,4BAAQhB,MAAOiB,EAAaC,QAASF,GAArC,cAMJ,IAAMC,EAAc,CAClBE,OAAQ,oBACRC,aAAc,MACdC,WAAY,cACZd,MAAO,OACPC,SAAU,OACVc,QAAS,YACTC,OAAQ,MACRC,OAAQ,WCbK,SAASC,EAAW7B,GACjC,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,iBACb,yBAAKC,GAAG,aACN,kBAACgB,EAAD,CAAQC,YAAapB,EAAM8B,wBAE7B,uBACEC,KAAK,2EACLC,MAAM,yBACN7B,GAAG,cACH8B,kBAAgB,SAEhB,kBAAC,IAAD,CAAiBC,KAAMC,IAAWC,KAAM,KAAMhC,MAAOiC,KAEvD,4BACEC,OAAK,EACLC,IAAI,0CACJC,QAAQ,YAOlB,IAAMH,EAAY,CAChB1B,MAAO,UACPC,SAAU,SACV6B,aAAc,ICsCDC,G,wDAjEb,WAAY1C,GAAQ,IAAD,8BACjB,cAAMA,IAuCR2C,yBAA2B,WAAO,IACxBC,EAAW,EAAKC,MAAhBD,OACFE,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,EAAOM,OAAS,GAC/D,OAAKN,EAAOM,OAEHJ,OAFW,GA3CH,EAiDnBhB,qBAAuB,WACrB,EAAKqB,SAAS,CAAEC,WAAY,EAAKT,8BAhDjC,EAAKE,MAAQ,CACXD,OAAQ,GACRQ,WAAY,MAJG,E,gEAWE,IAAD,OAGlBC,MADE,yIAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKN,SAAS,CAAEP,OAAQa,IAAc,kBACpC,EAAKN,SAAS,CAAEC,WAAY,EAAKT,qC,+BAoCvC,OACE,yBAAKzC,UAAU,aACb,yBAAKA,UAAU,MAAMC,GAAG,aACtB,kBAACJ,EAAD,CAAgBO,cAAeoD,KAAKpD,gBACpC,kBAACuB,EAAD,CAAYC,qBAAsB4B,KAAK5B,2B,oCA7B7C,OAAK4B,KAAKb,MAAMD,OAAOM,QAAWS,OAAOC,UAAUF,KAAKb,MAAMO,YAGrDM,KAAKb,MAAMD,OAAOc,KAAKb,MAAMO,iBAFpC,M,GA/BYS,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.62b96639.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function QuoteGenerator(props) {\n  return (\n    <React.Fragment>\n      <div className=\"quote\" id=\"text\">\n        <p style={quoteStyle}>\n          {props.selectedQuote ? `\"${props.selectedQuote.quote}\"` : \"\"}\n        </p>\n      </div>\n      <div style={authorStyle} className=\"author\" id=\"author\">\n        â€” {props.selectedQuote ? props.selectedQuote.author : \"\"}\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst quoteStyle = {\n  backgroundColor: \"#0f7173\",\n  color: \"#FFF\",\n  fontSize: \"2.5rem\",\n  lineHeight: \"3.2rem\",\n  display: \"inline\",\n};\n\nconst authorStyle = {\n  color: \"#0f7173\",\n  fontStyle: \"italic\",\n  fontSize: \"2rem\",\n  letterSpacing: \"2px\",\n  marginTop: \".2em\",\n  float: \"right\",\n};\n","import React from \"react\";\n\nexport default function Button({ handleClick }) {\n  return (\n    <button style={buttonStyle} onClick={handleClick}>\n      Next Quote\n    </button>\n  );\n}\n\nconst buttonStyle = {\n  border: \"1px solid #0f7173\",\n  borderRadius: \"5px\",\n  background: \"transparent\",\n  color: \"#000\",\n  fontSize: \"1rem\",\n  padding: \".5em .8em\",\n  margin: \"1em\",\n  cursor: \"pointer\",\n};\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport Button from \"./Button\";\n\nexport default function TweetQuote(props) {\n  return (\n    <React.Fragment>\n      <div className=\"btn-container\">\n        <div id=\"new-quote\">\n          <Button handleClick={props.handleNextQuoteClick} />\n        </div>\n        <a\n          href=\"https://twitter.com/intent/tweet?screen_name=toowee_&ref_src=twsrc%5Etfw\"\n          class=\"twitter-mention-button\"\n          id=\"tweet-quote\"\n          data-show-count=\"false\"\n        >\n          <FontAwesomeIcon icon={faTwitter} size={\"xs\"} style={iconStyle} />\n        </a>\n        <script\n          async\n          src=\"https://platform.twitter.com/widgets.js\"\n          charset=\"utf-8\"\n        ></script>\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst iconStyle = {\n  color: \"#1ea2f1\",\n  fontSize: \"2.5rem\",\n  paddingRight: 12,\n};\n","import React, { Component } from \"react\";\nimport QuoteGenerator from \"./components/QuoteGenerator\";\nimport TweetQuote from \"./components/TweetQuote\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      quoteIndex: null,\n    };\n  }\n\n  /**\n   * @description Fetch quotes from API\n   */\n  componentDidMount() {\n    const apiURL =\n      \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\";\n    fetch(apiURL)\n      .then((response) => response.json())\n      .then((quotesData) =>\n        this.setState({ quotes: quotesData }, () =>\n          this.setState({ quoteIndex: this.generateRandomQuoteIndex() })\n        )\n      );\n  }\n\n  /**\n   * @description Retrieve the selected quote from array.\n   * If array is empty or index is not a number, return undefined.\n   */\n\n  get selectedQuote() {\n    if (!this.state.quotes.length || !Number.isInteger(this.state.quoteIndex)) {\n      return undefined;\n    } else {\n      return this.state.quotes[this.state.quoteIndex];\n    }\n  }\n\n  /**\n   * @description Returns a random integer between 0 and the length of the array to represent an index in the array of quotes.\n   * If array is empty, return undefined.\n   */\n  generateRandomQuoteIndex = () => {\n    const { quotes } = this.state;\n    const randomIndex = Math.floor(Math.random() * quotes.length - 1);\n    if (!quotes.length) return undefined;\n    else {\n      return randomIndex;\n    }\n  };\n\n  handleNextQuoteClick = () => {\n    this.setState({ quoteIndex: this.generateRandomQuoteIndex() });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"App\" id=\"quote-box\">\n          <QuoteGenerator selectedQuote={this.selectedQuote} />\n          <TweetQuote handleNextQuoteClick={this.handleNextQuoteClick} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}